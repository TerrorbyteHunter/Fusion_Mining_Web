Objective:  
Revamp the messaging system to support differentiated views for buyers/sellers vs. admins, structured thread categorization, and automated communication workflows tied to project and marketplace activity.

---

 ✅ Functional Requirements

 1. Buyer/Seller Panel
- Display a single unified inbox showing all message threads.
- Each thread includes:
  - Counterparty name
  - Timestamp
  - Message preview
  - Thread type (optional tag: `project`, `marketplace`, `admin`)
- No categorization tabs—just chronological or searchable list.

 2. Admin Panel
- Messaging interface split into three tabs:
  - `Project Inquiries`: Threads initiated by buyers expressing interest in projects.
  - `Marketplace Inquiries`: Threads related to listings or buyer requests.
  - `Seller Communication`: Threads initiated by admin to sellers (e.g., follow-ups, clarifications).
- Each thread includes:
  - Project ID and name (if applicable)
  - Buyer name and contact
  - Seller name and contact
  - Thread type (`project_interest`, `marketplace_inquiry`, `admin_to_seller`)
  - Button: “Contact Seller” → starts or continues thread with seller

---

 🔄 Automated Workflow

 When Buyer Clicks “Interested” on a Project:
1. Create a new `message_thread` with:
   - `type = project_interest`
   - `related_project_id`
   - `created_by = buyer_id`
2. Auto-send message to buyer:
   > “We’ve received your interest in [Project Name]. Our admin team has been notified and will get back to you shortly.”
3. Notify admin:
   - Show new thread in `Project Inquiries` tab
   - Include buyer + project + seller metadata
4. Enable admin to click “Contact Seller”:
   - Starts or continues thread with seller
   - Thread type: `admin_to_seller`

 🧠 Backend Logic

 Extend `/api/projects/interest`
- Create thread if not exists (idempotent)
- Send auto-message to buyer
- Notify admin (store metadata or trigger dashboard update)

 Add `/api/messages/contact-seller`
- Accept `project_id` or `listing_id`
- Check if thread exists → continue
- Else → create new thread with `type = admin_to_seller`
- Send initial message from admin to seller

---

 🎨 Frontend Components

 Buyer/Seller
- `Inbox.tsx`: Unified thread list
- `ThreadView.tsx`: Chat interface

 Admin
- `AdminMessages.tsx`: Tabbed interface
  - `ProjectInquiriesTab.tsx`
  - `MarketplaceInquiriesTab.tsx`
  - `SellerCommunicationTab.tsx`
- `ThreadCard.tsx`: Includes project ID, buyer/seller info, “Contact Seller” button

---

 🛡️ Security & Roles
- Only admins can access structured tabs and contact sellers
- Role-based rendering of messaging views

Create test projects and market place items so we can try the functionality
Add a database schema for the changes on the messaging part so that i can update my local database for testing